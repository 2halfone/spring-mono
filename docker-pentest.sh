#!/bin/bash

# üî¥ LINUX PENETRATION TEST SCRIPT
# Docker Container Security Assessment

echo -e "\n\033[1;31müî¥ DOCKER CONTAINER PENETRATION TEST\033[0m"
echo "=================================================="
echo "Target: Docker containers on $(hostname)"
echo "Date: $(date)"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Results tracking
VULNERABILITIES=()
SECURE_COMPONENTS=()

add_vulnerability() {
    local category="$1"
    local description="$2"
    local risk="$3"
    VULNERABILITIES+=("[$risk] $category: $description")
}

add_secure_component() {
    local category="$1"
    local description="$2"
    SECURE_COMPONENTS+=("‚úÖ $category: $description")
}

# ============================================
# DOCKER SECURITY ASSESSMENT
# ============================================

test_docker_security() {
    echo -e "\n${CYAN}üê≥ DOCKER SECURITY ASSESSMENT${NC}"
    echo "----------------------------------------"

    # Test 1: Container Listing
    echo -e "\n${BLUE}üìã Active Containers:${NC}"
    if command -v docker &> /dev/null; then
        docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
        
        # Check for privileged containers
        echo -e "\n${BLUE}üîç Checking container privileges...${NC}"
        for container in $(docker ps --format "{{.Names}}"); do
            privileged=$(docker inspect "$container" --format '{{.HostConfig.Privileged}}' 2>/dev/null)
            if [ "$privileged" = "true" ]; then
                echo -e "${RED}‚ùå CRITICAL: Container $container running in privileged mode${NC}"
                add_vulnerability "Container Security" "Container $container has privileged access" "CRITICAL"
            else
                echo -e "${GREEN}‚úÖ Container $container not privileged${NC}"
                add_secure_component "Container Security" "Container $container properly restricted"
            fi
        done
    else
        echo -e "${RED}‚ùå Docker not available${NC}"
        return 1
    fi
}

# ============================================
# NETWORK PENETRATION TESTING
# ============================================

test_network_security() {
    echo -e "\n${CYAN}üåê NETWORK SECURITY TESTING${NC}"
    echo "----------------------------------------"

    # Test exposed ports
    echo -e "\n${BLUE}üîç Scanning exposed ports...${NC}"
    
    critical_ports=(5432 15432 6379 16379 8081)
    
    for port in "${critical_ports[@]}"; do
        if timeout 3 bash -c "</dev/tcp/localhost/$port" 2>/dev/null; then
            case $port in
                5432) service="PostgreSQL Production" ;;
                15432) service="PostgreSQL Staging" ;;
                6379) service="Redis Production" ;;
                16379) service="Redis Staging" ;;
                8081) service="Auth Service Direct" ;;
            esac
            echo -e "${RED}‚ùå CRITICAL: Port $port ($service) is EXPOSED${NC}"
            add_vulnerability "Network" "Port $port ($service) exposed to external access" "CRITICAL"
        else
            echo -e "${GREEN}‚úÖ Port $port is blocked${NC}"
            add_secure_component "Network" "Port $port properly blocked"
        fi
    done

    # Test Gateway
    echo -e "\n${BLUE}üö™ Testing Gateway accessibility...${NC}"
    if curl -s -f "http://localhost:8080/actuator/health" > /dev/null; then
        echo -e "${GREEN}‚úÖ Gateway accessible on port 8080 (expected)${NC}"
        add_secure_component "Network" "Gateway properly accessible"
    else
        echo -e "${RED}‚ùå Gateway not accessible${NC}"
        add_vulnerability "Network" "Gateway not responding" "HIGH"
    fi
}

# ============================================
# DATABASE SECURITY TESTING
# ============================================

test_database_security() {
    echo -e "\n${CYAN}üíæ DATABASE SECURITY TESTING${NC}"
    echo "----------------------------------------"

    # PostgreSQL Security Testing
    echo -e "\n${BLUE}üêò Testing PostgreSQL security...${NC}"
    
    # Test production PostgreSQL
    if timeout 5 psql -h localhost -p 5432 -U authuser -d authdb -c "SELECT version();" 2>/dev/null; then
        echo -e "${RED}‚ùå CRITICAL: Production PostgreSQL accessible externally!${NC}"
        add_vulnerability "Database" "Production PostgreSQL accessible from external network" "CRITICAL"
    else
        echo -e "${GREEN}‚úÖ Production PostgreSQL properly isolated${NC}"
        add_secure_component "Database" "Production PostgreSQL access blocked"
    fi

    # Test staging PostgreSQL
    if timeout 5 psql -h localhost -p 15432 -U authuser -d authdb -c "SELECT version();" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è WARNING: Staging PostgreSQL accessible externally${NC}"
        add_vulnerability "Database" "Staging PostgreSQL accessible from external network" "HIGH"
    else
        echo -e "${GREEN}‚úÖ Staging PostgreSQL properly isolated${NC}"
        add_secure_component "Database" "Staging PostgreSQL access blocked"
    fi

    # Redis Security Testing
    echo -e "\n${BLUE}üóÑÔ∏è Testing Redis security...${NC}"
    
    # Test production Redis
    if timeout 5 redis-cli -h localhost -p 6379 ping 2>/dev/null | grep -q "PONG"; then
        echo -e "${RED}‚ùå CRITICAL: Production Redis accessible externally!${NC}"
        add_vulnerability "Database" "Production Redis accessible from external network" "CRITICAL"
        
        # Test Redis commands if accessible
        echo -e "${BLUE}üîç Testing Redis command access...${NC}"
        if redis-cli -h localhost -p 6379 INFO server 2>/dev/null | grep -q "redis_version"; then
            echo -e "${RED}‚ùå CRITICAL: Redis INFO command accessible${NC}"
            add_vulnerability "Database" "Redis INFO command accessible" "HIGH"
        fi
        
        if redis-cli -h localhost -p 6379 CONFIG GET "*" 2>/dev/null | grep -q "save"; then
            echo -e "${RED}‚ùå CRITICAL: Redis CONFIG command accessible${NC}"
            add_vulnerability "Database" "Redis CONFIG command accessible" "CRITICAL"
        fi
    else
        echo -e "${GREEN}‚úÖ Production Redis properly isolated${NC}"
        add_secure_component "Database" "Production Redis access blocked"
    fi

    # Test staging Redis
    if timeout 5 redis-cli -h localhost -p 16379 ping 2>/dev/null | grep -q "PONG"; then
        echo -e "${YELLOW}‚ö†Ô∏è WARNING: Staging Redis accessible externally${NC}"
        add_vulnerability "Database" "Staging Redis accessible from external network" "MEDIUM"
    else
        echo -e "${GREEN}‚úÖ Staging Redis properly isolated${NC}"
        add_secure_component "Database" "Staging Redis access blocked"
    fi
}

# ============================================
# CONTAINER ESCAPE TESTING
# ============================================

test_container_escape() {
    echo -e "\n${CYAN}üîì CONTAINER ESCAPE TESTING${NC}"
    echo "----------------------------------------"

    containers=("spring-mono-postgres-1" "spring-mono-redis-1" "redis-staging" "postgres-staging")
    
    for container in "${containers[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
            echo -e "\n${BLUE}üß™ Testing container: $container${NC}"
            
            # Test 1: Shell access
            if docker exec "$container" whoami 2>/dev/null; then
                echo -e "${RED}‚ùå WARNING: Shell access available in $container${NC}"
                add_vulnerability "Container Security" "Shell access available in container $container" "MEDIUM"
                
                # Test privilege escalation
                if docker exec "$container" id 2>/dev/null | grep -q "uid=0"; then
                    echo -e "${RED}‚ùå CRITICAL: Root access in container $container${NC}"
                    add_vulnerability "Container Security" "Root access in container $container" "HIGH"
                else
                    echo -e "${GREEN}‚úÖ Non-root user in container $container${NC}"
                    add_secure_component "Container Security" "Non-root user in container $container"
                fi
                
                # Test filesystem access
                if docker exec "$container" ls -la / 2>/dev/null | head -3; then
                    echo -e "${YELLOW}‚ö†Ô∏è Filesystem access available in $container${NC}"
                fi
                
                # Test system information access
                if docker exec "$container" cat /proc/version 2>/dev/null; then
                    echo -e "${YELLOW}‚ö†Ô∏è System information accessible from $container${NC}"
                fi
                
            else
                echo -e "${GREEN}‚úÖ No shell access to container $container${NC}"
                add_secure_component "Container Security" "Shell access properly restricted in $container"
            fi
            
            # Test 2: Volume mount analysis
            mounts=$(docker inspect "$container" --format '{{range .Mounts}}{{.Source}}:{{.Destination}} {{end}}' 2>/dev/null)
            if [ -n "$mounts" ]; then
                echo -e "${BLUE}üìÅ Volume mounts: $mounts${NC}"
                
                # Check for dangerous mounts
                if echo "$mounts" | grep -E "(:/|/proc|/sys|/dev)" > /dev/null; then
                    echo -e "${RED}‚ùå CRITICAL: Dangerous volume mounts detected in $container${NC}"
                    add_vulnerability "Container Security" "Dangerous volume mounts in container $container" "CRITICAL"
                else
                    echo -e "${GREEN}‚úÖ Safe volume mounts in $container${NC}"
                    add_secure_component "Container Security" "Safe volume configuration in $container"
                fi
            fi
            
            # Test 3: Network analysis
            networks=$(docker inspect "$container" --format '{{range $net, $conf := .NetworkSettings.Networks}}{{$net}} {{end}}' 2>/dev/null)
            echo -e "${BLUE}üåê Networks: $networks${NC}"
            
        else
            echo -e "${YELLOW}‚ö†Ô∏è Container $container not found${NC}"
        fi
    done
}

# ============================================
# API SECURITY TESTING
# ============================================

test_api_security() {
    echo -e "\n${CYAN}üåê API SECURITY TESTING${NC}"
    echo "----------------------------------------"

    # Test 1: Authentication endpoints
    echo -e "\n${BLUE}üîê Testing authentication security...${NC}"
    
    # Valid login test
    login_response=$(curl -s -X POST "http://localhost:8080/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"username":"admin","password":"admin123"}' \
        -w "%{http_code}")
    
    if echo "$login_response" | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Valid authentication working${NC}"
        add_secure_component "Authentication" "Valid login properly processed"
        
        # Extract token for further testing
        token=$(echo "$login_response" | jq -r '.token' 2>/dev/null | head -c 100)
        if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo -e "${GREEN}‚úÖ JWT token generated${NC}"
            
            # Test protected endpoint
            profile_response=$(curl -s -H "Authorization: Bearer $token" \
                "http://localhost:8080/auth/profile" \
                -w "%{http_code}")
            
            if echo "$profile_response" | grep -q "200"; then
                echo -e "${GREEN}‚úÖ Protected endpoint accessible with valid token${NC}"
                add_secure_component "Authorization" "Protected endpoint properly secured"
            else
                echo -e "${RED}‚ùå Protected endpoint not working with valid token${NC}"
                add_vulnerability "Authorization" "Valid token rejected by protected endpoint" "HIGH"
            fi
        fi
    else
        echo -e "${RED}‚ùå Authentication endpoint not working${NC}"
        add_vulnerability "Authentication" "Authentication service not responding" "CRITICAL"
    fi

    # SQL Injection testing
    echo -e "\n${BLUE}üíâ Testing SQL injection protection...${NC}"
    
    sql_payloads=(
        "admin' OR '1'='1' --"
        "admin'; DROP TABLE users; --"
        "' OR 1=1 #"
    )
    
    injection_blocked=0
    for payload in "${sql_payloads[@]}"; do
        injection_response=$(curl -s -X POST "http://localhost:8080/auth/login" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$payload\",\"password\":\"test\"}" \
            -w "%{http_code}")
        
        if echo "$injection_response" | grep -q "token"; then
            echo -e "${RED}‚ùå CRITICAL: SQL injection successful with: $payload${NC}"
            add_vulnerability "SQL Injection" "SQL injection vulnerability with payload: $payload" "CRITICAL"
        else
            ((injection_blocked++))
        fi
    done
    
    if [ $injection_blocked -eq ${#sql_payloads[@]} ]; then
        echo -e "${GREEN}‚úÖ All SQL injection attempts blocked${NC}"
        add_secure_component "SQL Injection" "SQL injection protection effective"
    fi

    # Rate limiting test
    echo -e "\n${BLUE}‚ö° Testing rate limiting...${NC}"
    
    rate_limit_count=0
    for i in {1..20}; do
        response=$(curl -s "http://localhost:8080/actuator/health" -w "%{http_code}" | tail -c 3)
        if [ "$response" = "429" ]; then
            ((rate_limit_count++))
        fi
        sleep 0.1
    done
    
    if [ $rate_limit_count -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Rate limiting active ($rate_limit_count rate limited responses)${NC}"
        add_secure_component "Rate Limiting" "Rate limiting properly configured"
    else
        echo -e "${YELLOW}‚ö†Ô∏è No rate limiting detected${NC}"
        add_vulnerability "Rate Limiting" "Rate limiting not active" "MEDIUM"
    fi
}

# ============================================
# RESULTS COMPILATION
# ============================================

show_results() {
    echo -e "\n${CYAN}üìä PENETRATION TEST RESULTS${NC}"
    echo "============================================"

    # Count vulnerabilities by severity
    critical_count=$(printf '%s\n' "${VULNERABILITIES[@]}" | grep -c "\[CRITICAL\]" || true)
    high_count=$(printf '%s\n' "${VULNERABILITIES[@]}" | grep -c "\[HIGH\]" || true)
    medium_count=$(printf '%s\n' "${VULNERABILITIES[@]}" | grep -c "\[MEDIUM\]" || true)
    low_count=$(printf '%s\n' "${VULNERABILITIES[@]}" | grep -c "\[LOW\]" || true)

    echo -e "\n${YELLOW}üéØ VULNERABILITY SUMMARY:${NC}"
    echo -e "${RED}‚ùå CRITICAL: $critical_count${NC}"
    echo -e "${RED}‚ö†Ô∏è  HIGH: $high_count${NC}"
    echo -e "${YELLOW}üü° MEDIUM: $medium_count${NC}"
    echo -e "${BLUE}üîµ LOW: $low_count${NC}"
    echo -e "${GREEN}‚úÖ SECURE COMPONENTS: ${#SECURE_COMPONENTS[@]}${NC}"

    # Show critical vulnerabilities
    if [ $critical_count -gt 0 ]; then
        echo -e "\n${RED}üö® CRITICAL VULNERABILITIES (IMMEDIATE ACTION REQUIRED):${NC}"
        printf '%s\n' "${VULNERABILITIES[@]}" | grep "\[CRITICAL\]" | while read -r vuln; do
            echo -e "${RED}  $vuln${NC}"
        done
    fi

    # Show high risk vulnerabilities
    if [ $high_count -gt 0 ]; then
        echo -e "\n${RED}‚ö†Ô∏è HIGH RISK VULNERABILITIES:${NC}"
        printf '%s\n' "${VULNERABILITIES[@]}" | grep "\[HIGH\]" | while read -r vuln; do
            echo -e "${RED}  $vuln${NC}"
        done
    fi

    # Show secure components
    if [ ${#SECURE_COMPONENTS[@]} -gt 0 ]; then
        echo -e "\n${GREEN}‚úÖ SECURITY STRENGTHS:${NC}"
        printf '%s\n' "${SECURE_COMPONENTS[@]}" | head -10 | while read -r secure; do
            echo -e "${GREEN}  $secure${NC}"
        done
        
        if [ ${#SECURE_COMPONENTS[@]} -gt 10 ]; then
            echo -e "${GREEN}  ... and $((${#SECURE_COMPONENTS[@]} - 10)) more secure components${NC}"
        fi
    fi

    # Security score
    total_tests=$((${#VULNERABILITIES[@]} + ${#SECURE_COMPONENTS[@]}))
    if [ $total_tests -gt 0 ]; then
        security_score=$(( (${#SECURE_COMPONENTS[@]} * 100) / total_tests ))
        echo -e "\n${YELLOW}üèÜ OVERALL SECURITY SCORE: $security_score%${NC}"
    fi

    # Risk assessment
    echo -e "\n${YELLOW}üéØ RISK ASSESSMENT:${NC}"
    if [ $critical_count -gt 0 ]; then
        echo -e "${RED}‚ùå SYSTEM STATUS: HIGH RISK - Immediate remediation required${NC}"
    elif [ $high_count -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è SYSTEM STATUS: MEDIUM RISK - Prompt remediation recommended${NC}"
    elif [ $medium_count -gt 0 ]; then
        echo -e "${YELLOW}üü° SYSTEM STATUS: LOW RISK - Scheduled remediation advised${NC}"
    else
        echo -e "${GREEN}‚úÖ SYSTEM STATUS: SECURE - Monitoring recommended${NC}"
    fi

    # Generate report file
    report_file="docker_pentest_report_$(date +%Y%m%d_%H%M%S).txt"
    {
        echo "DOCKER PENETRATION TEST REPORT"
        echo "=============================="
        echo "Date: $(date)"
        echo "Target: Docker containers on $(hostname)"
        echo ""
        echo "SUMMARY:"
        echo "- Critical: $critical_count"
        echo "- High: $high_count"
        echo "- Medium: $medium_count"
        echo "- Low: $low_count"
        echo "- Secure: ${#SECURE_COMPONENTS[@]}"
        echo ""
        echo "VULNERABILITIES:"
        printf '%s\n' "${VULNERABILITIES[@]}"
        echo ""
        echo "SECURE COMPONENTS:"
        printf '%s\n' "${SECURE_COMPONENTS[@]}"
    } > "$report_file"

    echo -e "\n${CYAN}üìÑ Detailed report saved: $report_file${NC}"
}

# ============================================
# MAIN EXECUTION
# ============================================

main() {
    # Check if running with appropriate permissions
    if [ "$EUID" -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Running as root - some tests may not reflect real-world security${NC}"
    fi

    # Check Docker availability
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker not found. Please install Docker to run container tests.${NC}"
        exit 1
    fi

    # Execute test phases
    echo -e "${BLUE}Starting comprehensive penetration test...${NC}"
    
    test_docker_security
    test_network_security
    test_database_security
    test_container_escape
    test_api_security
    
    # Show results
    show_results
    
    echo -e "\n${GREEN}‚úÖ Penetration testing completed at $(date)${NC}"
    
    # Final recommendations
    echo -e "\n${YELLOW}üîß IMMEDIATE ACTIONS REQUIRED:${NC}"
    echo -e "1. ${RED}Block exposed database ports (5432, 15432, 6379, 16379)${NC}"
    echo -e "2. ${YELLOW}Implement Docker network isolation${NC}"
    echo -e "3. ${YELLOW}Review container security configurations${NC}"
    echo -e "4. ${BLUE}Schedule regular security assessments${NC}"
}

# Execute main function
main "$@"
