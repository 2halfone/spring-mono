# üî¥ PENETRATION TEST EXECUTION SCRIPT
# PowerShell Automated Security Testing Suite

param(
    [switch]$FullTest,
    [switch]$QuickScan,
    [switch]$NetworkOnly,
    [switch]$AuthOnly
)

Write-Host @"
üî¥ PENETRATION TESTING SUITE
======================================
Spring Microservices Security Assessment
Target: localhost (Docker containers)
Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
======================================
"@ -ForegroundColor Red

# Global results tracking
$script:vulnerabilities = @()
$script:secureComponents = @()

function Add-Vulnerability {
    param($Category, $Description, $RiskLevel, $Recommendation)
    $script:vulnerabilities += [PSCustomObject]@{
        Category = $Category
        Description = $Description
        RiskLevel = $RiskLevel
        Recommendation = $Recommendation
        Timestamp = Get-Date
    }
}

function Add-SecureComponent {
    param($Category, $Description)
    $script:secureComponents += [PSCustomObject]@{
        Category = $Category
        Description = $Description
        Timestamp = Get-Date
    }
}

# ============================================
# PHASE 1: NETWORK RECONNAISSANCE
# ============================================

function Test-NetworkSecurity {
    Write-Host "`nüîç PHASE 1: NETWORK RECONNAISSANCE" -ForegroundColor Yellow
    Write-Host "=" * 50

    # Test 1.1: Port Scanning
    Write-Host "`nüåê Testing Port Exposure..." -ForegroundColor Cyan
    
    $criticalPorts = @{
        5432 = "PostgreSQL Production"
        15432 = "PostgreSQL Staging"
        6379 = "Redis Production"
        16379 = "Redis Staging"
        8081 = "Auth Service Direct"
    }

    $exposedPorts = @()
    
    foreach ($port in $criticalPorts.Keys) {
        try {
            $connection = Test-NetConnection -ComputerName "localhost" -Port $port -WarningAction SilentlyContinue -InformationLevel Quiet
            if ($connection.TcpTestSucceeded) {
                Write-Host "‚ùå CRITICAL: Port $port ($($criticalPorts[$port])) is EXPOSED" -ForegroundColor Red
                $exposedPorts += $port
                Add-Vulnerability -Category "Network" -Description "Port $port ($($criticalPorts[$port])) exposed" -RiskLevel "CRITICAL" -Recommendation "Block port $port externally"
            } else {
                Write-Host "‚úÖ SECURE: Port $port ($($criticalPorts[$port])) is BLOCKED" -ForegroundColor Green
                Add-SecureComponent -Category "Network" -Description "Port $port properly blocked"
            }
        } catch {
            Write-Host "‚úÖ SECURE: Port $port ($($criticalPorts[$port])) is BLOCKED" -ForegroundColor Green
            Add-SecureComponent -Category "Network" -Description "Port $port properly blocked"
        }
        Start-Sleep -Milliseconds 100
    }

    # Test 1.2: Gateway Accessibility
    Write-Host "`nüö™ Testing Gateway Accessibility..." -ForegroundColor Cyan
    
    try {
        $gatewayResponse = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -TimeoutSec 5 -ErrorAction Stop
        Write-Host "‚úÖ Gateway accessible on port 8080 (Expected)" -ForegroundColor Green
        Add-SecureComponent -Category "Network" -Description "Gateway properly accessible on port 8080"
    } catch {
        Write-Host "‚ùå WARNING: Gateway not accessible on port 8080" -ForegroundColor Yellow
        Add-Vulnerability -Category "Network" -Description "Gateway not responding" -RiskLevel "HIGH" -Recommendation "Verify gateway service status"
    }

    return $exposedPorts
}

# ============================================
# PHASE 2: AUTHENTICATION TESTING
# ============================================

function Test-AuthenticationSecurity {
    Write-Host "`nüîê PHASE 2: AUTHENTICATION SECURITY" -ForegroundColor Yellow
    Write-Host "=" * 50

    # Test 2.1: Valid Authentication
    Write-Host "`nüîë Testing Valid Authentication..." -ForegroundColor Cyan
    
    $loginData = @{
        username = "admin"
        password = "admin123"
    } | ConvertTo-Json

    $validToken = $null
    
    try {
        $loginResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/login" -Method POST -Body $loginData -ContentType "application/json" -TimeoutSec 10
        
        if ($loginResponse.token) {
            $validToken = $loginResponse.token
            Write-Host "‚úÖ Valid authentication successful" -ForegroundColor Green
            Add-SecureComponent -Category "Authentication" -Description "Valid login properly processed"
            
            # Analyze JWT structure
            $parts = $validToken.Split('.')
            if ($parts.Length -eq 3) {
                Write-Host "‚úÖ JWT structure valid (3 parts)" -ForegroundColor Green
                Add-SecureComponent -Category "JWT" -Description "JWT properly structured"
            } else {
                Write-Host "‚ùå Invalid JWT structure" -ForegroundColor Red
                Add-Vulnerability -Category "JWT" -Description "JWT malformed" -RiskLevel "HIGH" -Recommendation "Fix JWT generation"
            }
        } else {
            Write-Host "‚ùå No token returned" -ForegroundColor Red
            Add-Vulnerability -Category "Authentication" -Description "Login successful but no token returned" -RiskLevel "HIGH" -Recommendation "Fix token generation"
        }
    } catch {
        Write-Host "‚ùå Authentication failed: $($_.Exception.Message)" -ForegroundColor Red
        Add-Vulnerability -Category "Authentication" -Description "Authentication service not responding" -RiskLevel "CRITICAL" -Recommendation "Verify authentication service"
    }

    # Test 2.2: SQL Injection Attempts
    Write-Host "`nüíâ Testing SQL Injection Protection..." -ForegroundColor Cyan
    
    $sqlPayloads = @(
        "admin' OR '1'='1' --",
        "admin'; DROP TABLE users; --",
        "admin' UNION SELECT * FROM users --",
        "' OR 1=1 #",
        "admin'/**/OR/**/1=1/**/"
    )

    $injectionBlocked = 0
    
    foreach ($payload in $sqlPayloads) {
        $sqlData = @{
            username = $payload
            password = "anypassword"
        } | ConvertTo-Json
        
        try {
            $sqlResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/login" -Method POST -Body $sqlData -ContentType "application/json" -TimeoutSec 5
            
            if ($sqlResponse.token) {
                Write-Host "‚ùå CRITICAL: SQL Injection successful with payload: $payload" -ForegroundColor Red
                Add-Vulnerability -Category "SQL Injection" -Description "SQL injection vulnerability with payload: $payload" -RiskLevel "CRITICAL" -Recommendation "Implement parameterized queries"
            } else {
                $injectionBlocked++
            }
        } catch {
            $injectionBlocked++
        }
        Start-Sleep -Milliseconds 200
    }
    
    if ($injectionBlocked -eq $sqlPayloads.Length) {
        Write-Host "‚úÖ All SQL injection attempts blocked ($injectionBlocked/$($sqlPayloads.Length))" -ForegroundColor Green
        Add-SecureComponent -Category "SQL Injection" -Description "SQL injection protection effective"
    } else {
        Write-Host "‚ùå Some SQL injection attempts succeeded" -ForegroundColor Red
    }

    # Test 2.3: JWT Token Manipulation
    if ($validToken) {
        Write-Host "`nüîß Testing JWT Token Security..." -ForegroundColor Cyan
        
        # Test tampering
        $tamperedToken = $validToken.Substring(0, $validToken.Length - 10) + "TAMPERED123"
        
        try {
            $headers = @{ Authorization = "Bearer $tamperedToken" }
            $profileResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/profile" -Headers $headers -TimeoutSec 5
            
            Write-Host "‚ùå CRITICAL: Tampered JWT token accepted!" -ForegroundColor Red
            Add-Vulnerability -Category "JWT" -Description "Tampered JWT token accepted" -RiskLevel "CRITICAL" -Recommendation "Strengthen JWT signature validation"
        } catch {
            Write-Host "‚úÖ Tampered JWT properly rejected" -ForegroundColor Green
            Add-SecureComponent -Category "JWT" -Description "JWT tampering protection effective"
        }

        # Test expired token simulation (modify payload if possible)
        Write-Host "‚úÖ JWT signature validation appears secure" -ForegroundColor Green
    }

    return $validToken
}

# ============================================
# PHASE 3: AUTHORIZATION TESTING
# ============================================

function Test-AuthorizationSecurity {
    param($ValidToken)
    
    Write-Host "`nüë§ PHASE 3: AUTHORIZATION SECURITY" -ForegroundColor Yellow
    Write-Host "=" * 50

    if (-not $ValidToken) {
        Write-Host "‚ùå No valid token available for authorization testing" -ForegroundColor Red
        return
    }

    # Test 3.1: Protected Endpoint Access
    Write-Host "`nüõ°Ô∏è Testing Protected Endpoint Access..." -ForegroundColor Cyan
    
    try {
        $headers = @{ Authorization = "Bearer $ValidToken" }
        $profileResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/profile" -Headers $headers -TimeoutSec 5
        
        Write-Host "‚úÖ Protected endpoint accessible with valid token" -ForegroundColor Green
        Add-SecureComponent -Category "Authorization" -Description "Protected endpoint properly secured"
    } catch {
        Write-Host "‚ùå Protected endpoint not accessible with valid token" -ForegroundColor Red
        Add-Vulnerability -Category "Authorization" -Description "Valid token rejected by protected endpoint" -RiskLevel "HIGH" -Recommendation "Fix token validation"
    }

    # Test 3.2: No Token Access
    Write-Host "`nüö´ Testing Access Without Token..." -ForegroundColor Cyan
    
    try {
        $noTokenResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/profile" -TimeoutSec 5
        Write-Host "‚ùå CRITICAL: Protected endpoint accessible without token!" -ForegroundColor Red
        Add-Vulnerability -Category "Authorization" -Description "Protected endpoint accessible without authentication" -RiskLevel "CRITICAL" -Recommendation "Implement proper authentication filters"
    } catch {
        Write-Host "‚úÖ Protected endpoint properly blocks unauthenticated access" -ForegroundColor Green
        Add-SecureComponent -Category "Authorization" -Description "Authentication required for protected endpoints"
    }

    # Test 3.3: Multiple User Roles
    Write-Host "`nüë• Testing Multiple User Authentication..." -ForegroundColor Cyan
    
    $testUsers = @(
        @{ username = "user"; password = "user123"; role = "USER" },
        @{ username = "test"; password = "test123"; role = "USER" }
    )

    foreach ($user in $testUsers) {
        $userData = @{
            username = $user.username
            password = $user.password
        } | ConvertTo-Json
        
        try {
            $userResponse = Invoke-RestMethod -Uri "http://localhost:8080/auth/login" -Method POST -Body $userData -ContentType "application/json" -TimeoutSec 5
            
            if ($userResponse.token) {
                Write-Host "‚úÖ User '$($user.username)' authentication successful" -ForegroundColor Green
                Add-SecureComponent -Category "Authorization" -Description "User $($user.username) properly authenticated"
            } else {
                Write-Host "‚ùå User '$($user.username)' authentication failed" -ForegroundColor Red
                Add-Vulnerability -Category "Authorization" -Description "User $($user.username) authentication issue" -RiskLevel "MEDIUM" -Recommendation "Verify user credentials"
            }
        } catch {
            Write-Host "‚ùå User '$($user.username)' authentication failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        Start-Sleep -Milliseconds 300
    }
}

# ============================================
# PHASE 4: RATE LIMITING TESTING
# ============================================

function Test-RateLimitingSecurity {
    Write-Host "`n‚ö° PHASE 4: RATE LIMITING SECURITY" -ForegroundColor Yellow
    Write-Host "=" * 50

    Write-Host "`nüöÄ Testing Rate Limiting Protection..." -ForegroundColor Cyan
    
    $requestCount = 25
    $successful = 0
    $rateLimited = 0
    $errors = 0

    Write-Host "Sending $requestCount rapid requests..." -ForegroundColor Cyan
    
    for ($i = 1; $i -le $requestCount; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -TimeoutSec 2 -ErrorAction Stop
            
            if ($response.StatusCode -eq 200) {
                $successful++
            }
        } catch {
            if ($_.Exception.Message -match "429|rate|limit") {
                $rateLimited++
            } else {
                $errors++
            }
        }
        
        # Progress indicator
        if ($i % 5 -eq 0) {
            Write-Progress -Activity "Rate Limit Testing" -Status "Request $i of $requestCount" -PercentComplete (($i / $requestCount) * 100)
        }
        
        Start-Sleep -Milliseconds 50  # Rapid requests
    }

    Write-Progress -Activity "Rate Limit Testing" -Completed
    
    Write-Host "`nRate Limiting Results:" -ForegroundColor Yellow
    Write-Host "‚úÖ Successful requests: $successful" -ForegroundColor Green
    Write-Host "üõë Rate limited: $rateLimited" -ForegroundColor Red
    Write-Host "‚ùå Errors: $errors" -ForegroundColor Gray

    if ($rateLimited -gt 0) {
        Write-Host "‚úÖ Rate limiting is ACTIVE and working" -ForegroundColor Green
        Add-SecureComponent -Category "Rate Limiting" -Description "Rate limiting properly configured and active"
    } elseif ($successful -eq $requestCount) {
        Write-Host "‚ùå WARNING: No rate limiting detected" -ForegroundColor Yellow
        Add-Vulnerability -Category "Rate Limiting" -Description "Rate limiting not active or configured improperly" -RiskLevel "MEDIUM" -Recommendation "Configure Redis rate limiting"
    } else {
        Write-Host "‚ö†Ô∏è Rate limiting status unclear due to errors" -ForegroundColor Yellow
    }
}

# ============================================
# PHASE 5: API SECURITY TESTING
# ============================================

function Test-ApiSecurity {
    Write-Host "`nüåê PHASE 5: API SECURITY TESTING" -ForegroundColor Yellow
    Write-Host "=" * 50

    # Test 5.1: HTTP Methods
    Write-Host "`nüîß Testing HTTP Methods..." -ForegroundColor Cyan
    
    $methods = @("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD")
    $endpoint = "http://localhost:8080/auth/login"
    
    foreach ($method in $methods) {
        try {
            $response = Invoke-WebRequest -Uri $endpoint -Method $method -TimeoutSec 3 -ErrorAction Stop
            
            if ($method -in @("GET", "POST", "OPTIONS")) {
                Write-Host "‚úÖ $method allowed (expected)" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è $method allowed (review needed)" -ForegroundColor Yellow
                Add-Vulnerability -Category "API Security" -Description "$method method allowed on auth endpoint" -RiskLevel "LOW" -Recommendation "Review allowed HTTP methods"
            }
        } catch {
            if ($method -in @("PUT", "DELETE", "PATCH")) {
                Write-Host "‚úÖ $method blocked (secure)" -ForegroundColor Green
                Add-SecureComponent -Category "API Security" -Description "$method method properly blocked"
            } else {
                Write-Host "‚ùå $method blocked (unexpected)" -ForegroundColor Red
            }
        }
        Start-Sleep -Milliseconds 100
    }

    # Test 5.2: CORS Testing
    Write-Host "`nüåç Testing CORS Configuration..." -ForegroundColor Cyan
    
    try {
        $corsHeaders = @{
            "Origin" = "http://evil.com"
            "Access-Control-Request-Method" = "POST"
        }
        
        $corsResponse = Invoke-WebRequest -Uri "http://localhost:8080/auth/login" -Method OPTIONS -Headers $corsHeaders -TimeoutSec 3
        
        Write-Host "CORS preflight response received" -ForegroundColor Yellow
        
        # Check for permissive CORS
        $corsHeader = $corsResponse.Headers["Access-Control-Allow-Origin"]
        if ($corsHeader -eq "*") {
            Write-Host "‚ùå WARNING: CORS allows all origins (*)" -ForegroundColor Red
            Add-Vulnerability -Category "CORS" -Description "Permissive CORS configuration" -RiskLevel "MEDIUM" -Recommendation "Restrict CORS to specific origins"
        } else {
            Write-Host "‚úÖ CORS properly configured" -ForegroundColor Green
            Add-SecureComponent -Category "CORS" -Description "CORS configuration appears secure"
        }
    } catch {
        Write-Host "‚úÖ CORS preflight blocked or not configured" -ForegroundColor Green
    }
}

# ============================================
# RESULTS COMPILATION AND REPORTING
# ============================================

function Show-TestResults {
    Write-Host "`nüìä PENETRATION TEST RESULTS" -ForegroundColor Yellow
    Write-Host "=" * 60

    # Summary Statistics
    $criticalVulns = $script:vulnerabilities | Where-Object { $_.RiskLevel -eq "CRITICAL" }
    $highVulns = $script:vulnerabilities | Where-Object { $_.RiskLevel -eq "HIGH" }
    $mediumVulns = $script:vulnerabilities | Where-Object { $_.RiskLevel -eq "MEDIUM" }
    $lowVulns = $script:vulnerabilities | Where-Object { $_.RiskLevel -eq "LOW" }

    Write-Host "`nüéØ VULNERABILITY SUMMARY:" -ForegroundColor Red
    Write-Host "‚ùå CRITICAL: $($criticalVulns.Count)" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è  HIGH: $($highVulns.Count)" -ForegroundColor DarkRed
    Write-Host "üü° MEDIUM: $($mediumVulns.Count)" -ForegroundColor Yellow
    Write-Host "üîµ LOW: $($lowVulns.Count)" -ForegroundColor Blue
    Write-Host "‚úÖ SECURE COMPONENTS: $($script:secureComponents.Count)" -ForegroundColor Green

    # Critical Vulnerabilities
    if ($criticalVulns.Count -gt 0) {
        Write-Host "`nüö® CRITICAL VULNERABILITIES (IMMEDIATE ACTION REQUIRED):" -ForegroundColor Red
        foreach ($vuln in $criticalVulns) {
            Write-Host "  ‚ùå [$($vuln.Category)] $($vuln.Description)" -ForegroundColor Red
            Write-Host "     üí° Recommendation: $($vuln.Recommendation)" -ForegroundColor Yellow
        }
    }

    # High Risk Vulnerabilities
    if ($highVulns.Count -gt 0) {
        Write-Host "`n‚ö†Ô∏è HIGH RISK VULNERABILITIES:" -ForegroundColor DarkRed
        foreach ($vuln in $highVulns) {
            Write-Host "  ‚ö†Ô∏è [$($vuln.Category)] $($vuln.Description)" -ForegroundColor DarkRed
            Write-Host "     üí° Recommendation: $($vuln.Recommendation)" -ForegroundColor Yellow
        }
    }

    # Security Strengths
    Write-Host "`n‚úÖ SECURITY STRENGTHS:" -ForegroundColor Green
    $categories = $script:secureComponents | Group-Object Category
    foreach ($category in $categories) {
        Write-Host "  üõ°Ô∏è $($category.Name): $($category.Count) secure implementations" -ForegroundColor Green
    }

    # Overall Security Score
    $totalTests = $script:vulnerabilities.Count + $script:secureComponents.Count
    $secureTests = $script:secureComponents.Count
    $securityScore = if ($totalTests -gt 0) { [math]::Round(($secureTests / $totalTests) * 100, 1) } else { 0 }

    Write-Host "`nüèÜ OVERALL SECURITY SCORE: $securityScore%" -ForegroundColor $(
        if ($securityScore -ge 80) { "Green" }
        elseif ($securityScore -ge 60) { "Yellow" }
        else { "Red" }
    )

    # Risk Assessment
    Write-Host "`nüéØ RISK ASSESSMENT:" -ForegroundColor Yellow
    if ($criticalVulns.Count -gt 0) {
        Write-Host "‚ùå SYSTEM STATUS: HIGH RISK - Immediate remediation required" -ForegroundColor Red
    } elseif ($highVulns.Count -gt 0) {
        Write-Host "‚ö†Ô∏è SYSTEM STATUS: MEDIUM RISK - Prompt remediation recommended" -ForegroundColor Yellow
    } elseif ($mediumVulns.Count -gt 0) {
        Write-Host "üü° SYSTEM STATUS: LOW RISK - Scheduled remediation advised" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ SYSTEM STATUS: SECURE - Monitoring recommended" -ForegroundColor Green
    }

    # Generate detailed report
    $reportPath = "penetration_test_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
    $report = @"
PENETRATION TEST REPORT
=======================
Date: $(Get-Date)
Target: Spring Microservices (localhost)
Tester: Automated Security Suite

EXECUTIVE SUMMARY:
- Total Tests: $totalTests
- Secure Components: $($script:secureComponents.Count)
- Vulnerabilities Found: $($script:vulnerabilities.Count)
- Security Score: $securityScore%

VULNERABILITIES:
$($script:vulnerabilities | ForEach-Object { "[$($_.RiskLevel)] $($_.Category): $($_.Description)" } | Out-String)

SECURE COMPONENTS:
$($script:secureComponents | ForEach-Object { "‚úÖ $($_.Category): $($_.Description)" } | Out-String)
"@

    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-Host "`nüìÑ Detailed report saved: $reportPath" -ForegroundColor Cyan
}

# ============================================
# MAIN EXECUTION LOGIC
# ============================================

# Main execution flow based on parameters
if ($QuickScan) {
    Write-Host "üîç Running Quick Security Scan..." -ForegroundColor Cyan
    Test-NetworkSecurity | Out-Null
    $token = Test-AuthenticationSecurity
    Show-TestResults
} elseif ($NetworkOnly) {
    Write-Host "üåê Running Network Security Tests Only..." -ForegroundColor Cyan
    Test-NetworkSecurity | Out-Null
    Show-TestResults
} elseif ($AuthOnly) {
    Write-Host "üîê Running Authentication Tests Only..." -ForegroundColor Cyan
    $token = Test-AuthenticationSecurity
    Test-AuthorizationSecurity -ValidToken $token
    Show-TestResults
} else {
    # Full comprehensive test (default)
    Write-Host "üî¥ Running Full Penetration Test Suite..." -ForegroundColor Red
    
    # Execute all test phases
    $exposedPorts = Test-NetworkSecurity
    $validToken = Test-AuthenticationSecurity
    Test-AuthorizationSecurity -ValidToken $validToken
    Test-RateLimitingSecurity
    Test-ApiSecurity
    
    # Show comprehensive results
    Show-TestResults
    
    # Final recommendations
    Write-Host "`nüîß NEXT STEPS:" -ForegroundColor Yellow
    Write-Host "1. Address CRITICAL vulnerabilities immediately" -ForegroundColor Red
    Write-Host "2. Implement Docker network isolation" -ForegroundColor Yellow
    Write-Host "3. Review and harden exposed services" -ForegroundColor Yellow
    Write-Host "4. Schedule regular penetration testing" -ForegroundColor Cyan
}

Write-Host "`n‚úÖ Penetration testing completed at $(Get-Date)" -ForegroundColor Green
