┌─────────────────────────────────────────────────────────────────────────┐
│                        🌐 CLIENT LAYER                                 │
│                     (Browser/Mobile/API)                               │
└─────────────────┬───────────────────────────────────────────────────────┘
                  │
                  │ HTTP Requests
                  │ POST /auth/login (public)
                  │ GET /auth/me (protected)
                  ▼
┌─────────────────────────────────────────────────────────────────────────┐
│                🚪 SPRING CLOUD GATEWAY (Port 8080)                     │
│                        Entry Point + Router                            │
│                                                                         │
│  ┌───────────────────────────────────────────────────────────────────┐ │
│  │              🧠 JwtAuthenticationGatewayFilterFactory             │ │
│  │                                                                   │ │
│  │  ┌─────────────────┐    ┌─────────────────┐    ┌───────────────┐ │ │
│  │  │  📋 PUBLIC      │    │  🔐 PROTECTED   │    │  🚫 SECURITY  │ │ │
│  │  │  /auth/login    │    │  /auth/me       │    │  Missing JWT  │ │ │
│  │  │  NO AUTH ✅     │    │  JWT REQUIRED   │    │  → 401 ❌     │ │ │
│  │  └─────────────────┘    └─────────────────┘    └───────────────┘ │ │
│  └───────────────────────────────────────────────────────────────────┘ │
│                                                                         │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────────────┐ │
│  │ ⚡ Rate Limiting │  │ 🔑 IP Resolver  │  │  🔒 HTTPS Redirect      │ │
│  │ Redis-based     │  │ Request tracking│  │  HTTP → HTTPS           │ │
│  │ authRateLimiter │  │ ipKeyResolver   │  │  SecurityConfig         │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────────────┘ │
│                                                                         │
│  📊 Management Port: 8082 (Actuator)                                   │
│  🎯 ROUTING RULES:                                                      │
│      /auth/** → http://localhost:8081                                  │
│      /actuator/health → http://localhost:8080                          │
└──────────────────────┬────────────────────────────────────────────────┘
                       │                               │
                       │ HTTP Routing ONLY             │ Redis Connection
                       │ (No Database Connection)      │ (Rate Limiting)
                       ▼                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│                  🔐 AUTH-SERVICE (Port 8081)                           │
│                    Authentication Microservice                         │
│                                                                         │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────────────┐ │
│  │ 🎮 AuthController│  │ 🔑 JWT Utils    │  │ 🛡️ Security Config      │ │
│  │                 │  │                 │  │                         │ │
│  │ POST /login     │  │ Token generation│  │ FilterChainProxy        │ │
│  │ GET /me         │  │ Token validation│  │ Anonymous allowed       │ │
│  │ POST /register  │  │ HMAC-SHA256     │  │ for public endpoints    │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────────────┘ │
│                                                                         │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────────────┐ │
│  │ 👥 UserService  │  │ 🗃️ DatabaseInit │  │ 📊 Repository Layer     │ │
│  │                 │  │                 │  │                         │ │
│  │ User operations │  │ Schema creation │  │ JPA/Hibernate           │ │
│  │ Password hash   │  │ Data seeding    │  │ UserRepository          │ │
│  │ Role management │  │ admin/user/test │  │ RoleRepository          │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────────────┘ │
└──────────────────────┬───────────────────────────────┬─────────────────┘
                       │                               │
                       │ JPA/Hibernate                 │ Redis Connection
                       │ Connection Pool (HikariCP)    │ (Cache/Session)
                       ▼                               ▼
┌─────────────────────────────────────────────────────────────────────────┐
│                      💾 DATABASE LAYER                                 │
│                                                                         │
│  ┌─────────────────────────────────┐   ┌─────────────────────────────┐  │
│  │        🐘 POSTGRESQL            │   │         🔴 REDIS            │  │
│  │                                 │   │                             │  │
│  │  ⬅️ SOLO AUTH-SERVICE          │   │  ⬅️ GATEWAY + AUTH-SERVICE  │  │
│  │     (JPA Connection)            │   │     (Rate Limiting + Cache) │  │
│  │                                 │   │                             │  │
│  │  📦 DUAL CONTAINER SETUP:       │   │  📦 DUAL CONTAINER SETUP:   │  │
│  │  ├─ postgres-staging:5432       │   │  ├─ redis-staging:6379      │  │
│  │  └─ spring-mono-postgres:15432  │   │  └─ spring-mono-redis:16379 │  │
│  │                                 │   │                             │  │
│  │  📋 DATABASE SCHEMA:            │   │  ⚡ CACHE & RATE LIMITING:  │  │
│  │  ┌─────────────────────────┐    │   │  ┌─────────────────────────┐ │  │
│  │  │  🔧 TABLES:             │    │   │  │  🔧 KEYS:               │ │  │
│  │  │  ├─ users (id, username, │    │   │  │  ├─ rate_limit:*       │ │  │
│  │  │  │   email, password,   │    │   │  │  ├─ auth_session:*     │ │  │
│  │  │  │   created_date)      │    │   │  │  └─ jwt_blacklist:*    │ │  │
│  │  │  ├─ user_roles          │    │   │  └─────────────────────────┘ │  │
│  │  │  └─ authorities         │    │   │                             │  │
│  │  │                         │    │   │  ⚡ FUNCTIONS:               │  │
│  │  │  👥 SEEDED USERS:       │    │   │  ├─ Request rate limiting   │  │
│  │  │  ├─ admin/admin123      │    │   │  ├─ IP-based tracking      │  │
│  │  │  ├─ user/user123        │    │   │  └─ Token blacklisting     │  │
│  │  │  └─ test/test123        │    │   │                             │  │
│  │  └─────────────────────────┘    │   └─────────────────────────────┘  │
│  └─────────────────────────────────┘                                   │
└─────────────────────────────────────────────────────────────────────────┘

📊 ACTUAL REQUEST FLOW (VERIFIED):
=================================

🔓 PUBLIC ENDPOINT FLOW:
┌─ Client: POST /auth/login
├─ Gateway: "PUBLIC ACCESS: /auth/login - No authentication required"
├─ Gateway: Route to localhost:8081/auth/login (HTTP only)
├─ Auth-Service: AnonymousAuthenticationFilter (allowed)
├─ Auth-Service: Generate JWT token
└─ Response: 200 + JWT token

🔐 PROTECTED ENDPOINT FLOW (WITH TOKEN):
┌─ Client: GET /auth/me + Bearer JWT
├─ Gateway: "PROTECTED ACCESS: /auth/me - JWT validation required"
├─ Gateway: "AUTH SUCCESS: User 'admin' with roles 'ADMIN'"
├─ Gateway: Route to localhost:8081/auth/me (HTTP only)
├─ Auth-Service: FilterChainProxy secures request
└─ Response: 200 + user data

🚫 PROTECTED ENDPOINT FLOW (WITHOUT TOKEN):
┌─ Client: GET /auth/me (no token)
├─ Gateway: "PROTECTED ACCESS: /auth/me - JWT validation required"
├─ Gateway: "AUTH FAILURE: Missing JWT token"
└─ Response: 401 Unauthorized

🎯 CORRECTED CONNECTION ARCHITECTURE:
====================================
CLIENT → GATEWAY → AUTH-SERVICE → POSTGRESQL
         ↓         ↓
       REDIS     REDIS
    (rate limit) (cache/session)

✅ Gateway connects ONLY to Redis (rate limiting)
✅ Auth-Service connects to both PostgreSQL (data) and Redis (cache)

🌟 ARCHITECTURAL PATTERNS IDENTIFIED:
====================================
✅ API Gateway Pattern (Spring Cloud Gateway)
✅ JWT Stateless Authentication
✅ Smart Security Filter (public/protected detection)
✅ Redis-based Rate Limiting
✅ Multi-environment Configuration (dev/staging/prod/secure)
✅ Dual Database Setup (resilience)
✅ CSRF Protection (disabled for APIs)
✅ HTTPS Redirect (configurable)
✅ Circuit Breaker Ready (Resilience4j)
✅ Observability (Actuator endpoints)

🎯 TECHNOLOGY STACK:
===================
• Spring Boot 3.4.5
• Spring Cloud Gateway
• Spring Security 6.4.5
• JWT (jsonwebtoken 0.11.5)
• PostgreSQL (dual instances)
• Redis (rate limiting & caching)
• Docker Compose (infrastructure)
• Maven (multi-module build)


