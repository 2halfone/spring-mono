name: build-auth-and-deploy
on:
  push:
    branches: [ main ]

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/auth-service:${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login al registry GitHub Container
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCRTOKEN }}
      - name: Rendi eseguibile mvnw
        run: chmod +x auth-service/mvnw
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '21' }
      - name: Test & package
        working-directory: auth-service
        run: ./mvnw -B verify
      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: auth-service
          push: true
          tags: ${{ env.IMAGE }}
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v4
      - name: Clean and test SSH host
        run: |
          # crea la chiave
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

          # lista per debug
          ls -l /home/runner/.ssh

          # Pulisci il valore di DEPLOY_HOST
          RAW_HOST="${{ secrets.DEPLOY_HOST }}"
          CLEANED_HOST=$(echo -n "$RAW_HOST" | tr -d \'\\r\' | tr -d \' \' | tr -d \'\\n\')
          
          echo "RAW HOST: [$RAW_HOST]"
          echo "USING CLEANED HOST: [$CLEANED_HOST]"
          echo "HEX CLEANED HOST:"
          echo -n "$CLEANED_HOST" | xxd

          # prova SSH con debug usando CLEANED_HOST
          ssh -vvv -i /home/runner/.ssh/id_rsa \\
              -o StrictHostKeyChecking=no \\
              -o UserKnownHostsFile=/dev/null \\
              frazerfrax1@"$CLEANED_HOST" echo "SSH OK"
