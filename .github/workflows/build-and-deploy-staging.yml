name: build-and-deploy-staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - auth-service
          - chat-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login al registry GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Rendi eseguibile mvnw per ${{ matrix.service }}
        run: chmod +x ${{ matrix.service }}/mvnw

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Test & package ${{ matrix.service }}
        working-directory: ${{ matrix.service }}
        run: ./mvnw -B verify

      - name: Build & push image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepara chiave SSH
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

      - name: Verify SSH key and acceptance
        run: |
          # 1) Scrivi il secret in un file temporaneo
          echo "${{ secrets.DEPLOY_KEY }}" > debug_id_rsa
          chmod 600 debug_id_rsa

          # 2) Mostra l’impronta della chiave
          echo "### Fingerprint of DEPLOY_KEY:"
          ssh-keygen -lf debug_id_rsa

          # 3) Avvia un agente e carica la chiave
          eval "$(ssh-agent -s)"
          ssh-add debug_id_rsa

          # 4) Prova la connessione
          echo "### Testing SSH to staging VM…"
          ssh -o StrictHostKeyChecking=no \
              -o BatchMode=yes \
              ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} true \
            && echo "✅ Key accepted by VM" \
            || echo "❌ Key rejected by VM"

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no \
            "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" \
            "cd ~/staging && git pull origin staging && docker compose pull && docker compose up -d --remove-orphans"

  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Prepara chiave SSH
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

      - name: Smoke test via SSH
        run: |
          ssh -i /home/runner/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            frazerfrax1@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "– Verifica auth-service"
            curl --fail http://localhost:9081/actuator/health \
              -o /dev/null && echo "auth-service OK"

            echo "– Verifica chat-service"
            curl --fail http://localhost:9082/actuator/health \
              -o /dev/null && echo "chat-service OK"
          EOF
