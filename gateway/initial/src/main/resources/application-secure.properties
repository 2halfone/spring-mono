# 🔐 SECURE GATEWAY CONFIGURATION
# Gateway Service - Secure Profile for Internal Service Communication

spring.application.name=gateway-service

# 🌐 HTTP Configuration for Secure Environment
server.port=8080
server.ssl.enabled=false
server.address=0.0.0.0

# 📊 Management endpoints on main port (internal network is secure)
management.endpoints.web.exposure.include=health,info,metrics,gateway
management.endpoint.health.show-details=always

# 🔑 JWT Configuration
jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
jwt.issuer=${JWT_ISSUER:spring-microservices}

# 🚀 Redis Configuration for Rate Limiting (Internal)
spring.redis.host=${REDIS_HOST:redis}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.timeout=2000ms

# 📝 Logging Configuration for Secure Environment  
logging.level.root=INFO
logging.level.com.example.gateway=DEBUG
logging.level.com.example.security=DEBUG
logging.level.org.springframework.cloud.gateway=DEBUG

# ===== 🔐 SECURE GATEWAY ROUTING CONFIGURATION =====
# All routes use INTERNAL service URLs (no external ports)

# 🔐 AUTH SERVICE ROUTE - Internal Communication
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=http://auth-service:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=/auth/**
spring.cloud.gateway.routes[0].filters[0]=name=JwtAuthentication
spring.cloud.gateway.routes[0].filters[1]=name=RequestRateLimiter
spring.cloud.gateway.routes[0].filters[1].args.rate-limiter=#{@authRateLimiter}
spring.cloud.gateway.routes[0].filters[1].args.key-resolver=#{@ipKeyResolver}

# 🌐 API SERVICE ROUTE - Future expansion
spring.cloud.gateway.routes[1].id=api-service
spring.cloud.gateway.routes[1].uri=http://api-service:8080
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/**
spring.cloud.gateway.routes[1].filters[0]=name=JwtAuthentication
spring.cloud.gateway.routes[1].filters[1]=name=RequestRateLimiter

# 📊 ACTUATOR ROUTES - Management endpoints
spring.cloud.gateway.routes[2].id=management
spring.cloud.gateway.routes[2].uri=http://localhost:8080
spring.cloud.gateway.routes[2].predicates[0]=Path=/actuator/**
# No JWT filter for health checks

# ===== 🔒 SECURITY CONFIGURATION =====

# 🌍 CORS Configuration (Secure for production)
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOriginPatterns=https://*.yourdomain.com,http://localhost:*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=Authorization,Content-Type,X-Requested-With
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/**].maxAge=3600

# 🛡️ Security Headers
spring.cloud.gateway.default-filters[0]=name=SecureHeaders
spring.cloud.gateway.default-filters[0].args.x-frame-options=DENY
spring.cloud.gateway.default-filters[0].args.x-content-type-options=nosniff
spring.cloud.gateway.default-filters[0].args.x-xss-protection=1; mode=block
spring.cloud.gateway.default-filters[0].args.strict-transport-security=max-age=31536000; includeSubDomains

# ⚡ Circuit Breaker Configuration
spring.cloud.gateway.default-filters[1]=name=CircuitBreaker
spring.cloud.gateway.default-filters[1].args.name=defaultCircuitBreaker
spring.cloud.gateway.default-filters[1].args.fallbackUri=forward:/fallback

# 📏 Request Size Limits  
spring.cloud.gateway.httpclient.max-header-size=16KB
spring.cloud.gateway.httpclient.max-initial-line-length=4KB

# ⏱️ Timeout Configuration
spring.cloud.gateway.httpclient.connect-timeout=5000
spring.cloud.gateway.httpclient.response-timeout=30000

# 🔄 Retry Configuration
spring.cloud.gateway.default-filters[2]=name=Retry
spring.cloud.gateway.default-filters[2].args.retries=3
spring.cloud.gateway.default-filters[2].args.methods=GET,POST
spring.cloud.gateway.default-filters[2].args.backoff.firstBackoff=100ms
spring.cloud.gateway.default-filters[2].args.backoff.maxBackoff=500ms
