# Application properties for gateway-service
spring.application.name=gateway-service

# HTTPS/SSL Configuration (Phase 1.2 Security)
server.port=8443
server.ssl.enabled=true
server.ssl.key-store=classpath:ssl/keystore.p12
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:changeit}
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=spring-microservices

# HTTP to HTTPS Redirect Configuration
management.server.port=8080
management.server.ssl.enabled=false

# JWT Configuration (Environment-based secrets)
jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
jwt.issuer=${JWT_ISSUER:spring-microservices}

# Management endpoints
management.endpoints.web.exposure.include=health,info

# Redis Configuration for Rate Limiting (Phase 1.4 Security)
spring.redis.host=${REDIS_HOST:localhost}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.timeout=2000ms

# Logging
logging.level.root=INFO
logging.level.com.example.gateway=DEBUG

# Gateway configuration with JWT Authentication and Rate Limiting
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=http://auth-service:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=/auth/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=0
spring.cloud.gateway.routes[0].filters[1]=name=RequestRateLimiter
spring.cloud.gateway.routes[0].filters[1].args.rate-limiter=#{@authRateLimiter}
spring.cloud.gateway.routes[0].filters[1].args.key-resolver=#{@ipKeyResolver}

spring.cloud.gateway.routes[1].id=chat-service-secured
spring.cloud.gateway.routes[1].uri=http://chat-service:8080
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/**
spring.cloud.gateway.routes[1].filters[0]=name=JwtAuthentication
spring.cloud.gateway.routes[1].filters[1]=StripPrefix=1
spring.cloud.gateway.routes[1].filters[2]=name=RequestRateLimiter
spring.cloud.gateway.routes[1].filters[2].args.rate-limiter=#{@apiRateLimiter}
spring.cloud.gateway.routes[1].filters[2].args.key-resolver=#{@ipKeyResolver}

# CORS configuration (TODO: Secure in Phase 2)
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE
